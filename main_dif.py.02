import os
import torch
import torch.nn as nn
import torchvision

from typing import Optional, NamedTuple, Sequence
from lightning_fabric.utilities.seed import seed_everything
from lightning import Trainer, LightningModule
from lightning.pytorch.callbacks import ModelCheckpoint
from lightning.pytorch.callbacks import LearningRateMonitor, EarlyStopping
from lightning.pytorch.callbacks import StochasticWeightAveraging
from lightning.pytorch.loggers import TensorBoardLogger

from argparse import ArgumentParser
from tqdm.auto import tqdm

from pytorch3d.renderer.cameras import (
    FoVPerspectiveCameras,
    FoVOrthographicCameras,
    look_at_view_transform,
)
from pytorch3d.renderer.camera_utils import join_cameras_as_batch

from monai.losses import PerceptualLoss
from monai.networks.nets import Unet
from monai.networks.layers.factories import Norm

from generative.inferers import DiffusionInferer
from generative.networks.nets import DiffusionModelUNet
from generative.networks.schedulers import DDPMScheduler, DDIMScheduler

from datamodule import UnpairedDataModule
from dvr.renderer import ReverseXRayVolumeRenderer 
from dvr.renderer import normalized
from dvr.renderer import standardized

def make_cameras_dea(
    dist: torch.Tensor, 
    elev: torch.Tensor, 
    azim: torch.Tensor, 
    fov: int = 40, 
    znear: int = 4.0, 
    zfar: int = 8.0, 
    is_orthogonal: bool = False
):
    assert dist.device == elev.device == azim.device
    _device = dist.device
    R, T = look_at_view_transform(dist=dist.float(), elev=elev.float() * 90, azim=azim.float() * 180)
    if is_orthogonal:
        return FoVOrthographicCameras(R=R, T=T, znear=znear, zfar=zfar).to(_device)
    return FoVPerspectiveCameras(R=R, T=T, fov=fov, znear=znear, zfar=zfar).to(_device)

class NVMLightningModule(LightningModule):
    def __init__(self, hparams, **kwargs) -> None:
        super().__init__()
        self.lr = hparams.lr

        self.ckpt = hparams.ckpt
        self.strict = hparams.strict
        self.phase = hparams.phase
        self.img_shape = hparams.img_shape
        self.vol_shape = hparams.vol_shape
        self.fov_depth = hparams.fov_depth
        self.seed = hparams.seed
        
        self.lpips = hparams.lpips
        self.alpha = hparams.alpha
        self.gamma = hparams.gamma
        self.delta = hparams.delta
        self.theta = hparams.theta
        self.omega = hparams.omega
        self.lamda = hparams.lamda
        self.tfunc = hparams.tfunc
        
        self.timesteps = hparams.timesteps
        self.resample = hparams.resample
        self.perceptual2d = hparams.perceptual2d
        self.perceptual3d = hparams.perceptual3d
        self.perceptual = hparams.perceptual
        self.ssim = hparams.ssim
        
        self.logsdir = hparams.logsdir
        self.sh = hparams.sh
        self.pe = hparams.pe

        self.n_pts_per_ray = hparams.n_pts_per_ray
        self.weight_decay = hparams.weight_decay
        self.batch_size = hparams.batch_size
        self.devices = hparams.devices
        self.backbone = hparams.backbone
        
        self.save_hyperparameters()

        self.fwd_renderer = ReverseXRayVolumeRenderer(
            image_width=self.img_shape, 
            image_height=self.img_shape, 
            n_pts_per_ray=self.n_pts_per_ray, 
            min_depth=4.0, 
            max_depth=8.0, 
            ndc_extent=1.0,
        )

        if self.phase != 'xronly':
            self.inv_renderer = InverseXrayVolumeRenderer(
                in_channels=1, 
                out_channels=self.sh ** 2 if self.sh > 0 else 1, 
                vol_shape=self.vol_shape, 
                img_shape=self.img_shape, 
                sh=self.sh, 
                pe=self.pe, 
                backbone=self.backbone,
            )
            # init_weights(self.inv_renderer, init_type="normal")
        
        # @ Diffusion 
        self.unet2d_model = DiffusionModelUNet(
            spatial_dims=2, 
            in_channels=1, 
            out_channels=1, 
            num_channels=(128, 128, 256, 256),
            attention_levels=(False, False, True, True),
            num_res_blocks=1,
            num_head_channels=256,
            with_conditioning=True, 
            cross_attention_dim=16, # Condition with straight/hidden view  # flatR | flatT
        )

        self.ddpmsch = DDPMScheduler(
            num_train_timesteps=self.timesteps, 
            schedule="scaled_linear_beta", 
            prediction_type=hparams.prediction_type, 
            beta_start=0.0005, 
            beta_end=0.0195,
        )
        self.ddimsch = DDIMScheduler(
            num_train_timesteps=self.timesteps, 
            schedule="scaled_linear_beta", 
            prediction_type=hparams.prediction_type, 
            beta_start=0.0005, 
            beta_end=0.0195, 
            clip_sample=True,
        )
        self.inferer = DiffusionInferer(scheduler=self.ddpmsch)
                
        if self.ckpt:
            print("Loading.. ", self.ckpt)
            checkpoint = torch.load(self.ckpt, map_location=torch.device("cpu"))["state_dict"]
            state_dict = {k: v for k, v in checkpoint.items() if k in self.state_dict()}
            self.load_state_dict(state_dict, strict=self.strict)

        self.train_step_outputs = []
        self.validation_step_outputs = []
        self.loss = nn.L1Loss(reduction="mean")

        if self.perceptual:
            self.p2dloss = PerceptualLoss(
                spatial_dims=2, 
                network_type="radimagenet_resnet50", 
                is_fake_3d=False, 
                pretrained=True,
            )
            self.p3dloss = PerceptualLoss(
                spatial_dims=3, 
                network_type="medicalnet_resnet50_23datasets", 
                is_fake_3d=False, 
                pretrained=True,
            )
            
    def correct_window(self, T_old, a_min=-1024, a_max=3071, b_min=-512, b_max=3071):
        # Calculate the range for the old and new scales
        range_old = a_max - a_min
        range_new = b_max - b_min

        # Reverse the incorrect scaling
        T_raw = (T_old * range_old) + a_min
        
        # Apply the correct scaling
        T_new = (T_raw - b_min) / range_new
        return T_new.clamp_(0, 1)
       
    def forward_screen(self, image3d, cameras, is_training=False):
        if cameras.T.shape[-1] == 1:
            cameras.T = cameras.T.squeeze(-1)
        if self.tfunc:
            # Ensure the range
            density = image3d.clamp(0, 1)
            B, C, D, H, W = density.shape
            # Bin the data
            binning = density * (self.data_dim - 1)
            binning = binning.long().clamp_(0, self.data_dim - 1)
            # Apply the embedding
            flatten = self.emb_function(binning.flatten()) 
            # Reshape to the original tensor shape
            density = flatten.view((B, -1, D, H, W))
            # Ensuring the output is in the range (0, 1)
            density = torch.clamp_(density, 0, 1)
            return self.fwd_renderer(density, cameras, norm_type="standardized", stratified_sampling=is_training)
        else:
            image3d = self.correct_window(image3d, a_min=-1024, a_max=3071, b_min=-512, b_max=3071)
            return self.fwd_renderer(image3d, cameras, norm_type="standardized", stratified_sampling=is_training)

    def forward_volume(self, image2d, cameras, n_views=[2, 1], resample=True, timesteps=None, is_training=False):
        _device = image2d.device
        B = image2d.shape[0]
        assert B == sum(n_views)  # batch must be equal to number of projections
        
        # Transpose on the fly to make it homogeneous
        if self.resample:
            image2d = torch.flip(image2d, [2, 3])
        else:
            image2d = torch.flip(image2d, [3])
        image2d = image2d.transpose(2, 3)
        
        results = self.inv_renderer(image2d, cameras, resample, timesteps, is_training)
        return results

    def forward_timing(self, image2d, cameras, n_views=[2, 1], noise=None, resample=False, timesteps=None):
        _device = image2d.device
        B = image2d.shape[0]
        assert B == sum(n_views)  # batch must be equal to number of projections
        if timesteps is None:
            timesteps = torch.zeros((B,), device=_device).long()
        mat = cameras.get_projection_transform().get_matrix().contiguous().view(-1, 1, 16)
        results = self.inferer(
            inputs=image2d * 2.0 - 1.0, 
            diffusion_model=self.unet2d_model, 
            condition=mat.view(B, 1, -1), 
            noise=noise, 
            timesteps=timesteps
        ) * 0.5 + 0.5
        return results
    
    def _common_step(self, batch, batch_idx, stage: Optional[str] = "evaluation"):
        image3d = batch["image3d"]
        image2d = batch["image2d"]
        _device = batch["image3d"].device
        batchsz = image2d.shape[0]

        # Construct the random cameras, -1 and 1 are the same point in azimuths
        dist_random = 6.0 * torch.ones(self.batch_size, device=_device)
        elev_random = torch.rand_like(dist_random) - 0.5
        azim_random = torch.rand_like(dist_random) * 2 - 1  # from [0 1) to [-1 1)
        azim_random = 0.75 * azim_random - 0.25 #  from [-1, 1) to [-1, 0.5).
        view_random = make_cameras_dea(dist_random, elev_random, azim_random, fov=20, znear=4, zfar=8)

        dist_hidden = 6.0 * torch.ones(self.batch_size, device=_device)
        elev_hidden = torch.zeros(self.batch_size, device=_device)
        azim_hidden = torch.zeros(self.batch_size, device=_device)
        view_hidden = make_cameras_dea(dist_hidden, elev_hidden, azim_hidden, fov=20, znear=4, zfar=8)

        # # Construct the samples in 2D
        # figure_xr_hidden = image2d
        # figure_ct_random = self.forward_screen(image3d=image3d, cameras=view_random)
        # figure_ct_hidden = self.forward_screen(image3d=image3d, cameras=view_hidden)
        
        
        if self.phase == "xronly":     
            ### @ Diffusion step: 2 kinds of blending
            timesteps = torch.randint(0, self.inferer.scheduler.num_train_timesteps, (batchsz,), device=_device).long()  # 3 views

            figure_xr_latent_hidden = torch.randn_like(image2d) * 0.5 + 0.5 
            figure_xr_interp_hidden = self.ddpmsch.add_noise(original_samples=image2d, noise=figure_xr_latent_hidden, timesteps=timesteps) 
            
            figure_xr_output_hidden = self.forward_timing(
                image2d=figure_xr_interp_hidden,
                cameras=view_hidden,
                noise=figure_xr_latent_hidden,
                n_views=[1] * batchsz, 
                timesteps=timesteps,
            )
            
            if self.ddpmsch.prediction_type == "sample":
                figure_xr_target_hidden = image2d
            elif self.ddpmsch.prediction_type == "epsilon":
                figure_xr_target_hidden = figure_xr_latent_hidden
            elif self.ddpmsch.prediction_type == "v_prediction":
                figure_xr_target_hidden = self.ddpmsch.get_velocity(image2d, figure_xr_latent_hidden, timesteps)
            
            im2d_loss_dif = self.loss(figure_xr_output_hidden, figure_xr_target_hidden) 
               
            im2d_loss = im2d_loss_dif
            self.log(f"{stage}_im2d_loss", im2d_loss, on_step=(stage == "train"), prog_bar=True, logger=True, sync_dist=True, batch_size=self.batch_size)
            loss = self.gamma * im2d_loss
            
            # Visualization step
            if batch_idx == 0:
                # Sampling step for X-ray
                with torch.no_grad():
                    mat = view_hidden.get_projection_transform().get_matrix().contiguous().view(-1, 1, 16)
                    figure_xr_latent_hidden = torch.randn_like(image2d) * 0.5 + 0.5
                    figure_xr_sample_hidden = self.inferer.sample(input_noise=figure_xr_latent_hidden * 2.0 - 1.0, 
                                                                  diffusion_model=self.unet2d_model, 
                                                                  conditioning=mat.view(batchsz, 1, -1), 
                                                                  scheduler=self.ddpmsch, 
                                                                  verbose=False,) * 0.5 + 0.5
                zeros = torch.zeros_like(image2d)
                viz2d = torch.cat([
                    torch.cat([
                        image2d, 
                        figure_xr_latent_hidden,
                        figure_xr_interp_hidden,
                        figure_xr_output_hidden,
                        figure_xr_sample_hidden,
                    ], dim=-2).transpose(2, 3),
                ], dim=-2)

                tensorboard = self.logger.experiment
                grid2d = torchvision.utils.make_grid(viz2d, normalize=False, scale_each=True, nrow=1, padding=0)
                tensorboard.add_image(f"{stage}_df_samples", grid2d, self.current_epoch * self.batch_size + batch_idx)            
        return loss

    def training_step(self, batch, batch_idx):
        loss = self._common_step(batch, batch_idx, stage="train")
        self.train_step_outputs.append(loss)
        return loss

    def validation_step(self, batch, batch_idx):
        loss = self._common_step(batch, batch_idx, stage="validation")
        self.validation_step_outputs.append(loss)
        return loss

    def on_train_epoch_end(self):
        loss = torch.stack(self.train_step_outputs).mean()
        self.log(f"train_loss_epoch", loss, on_step=False, prog_bar=True, logger=True, sync_dist=True)
        self.train_step_outputs.clear()  # free memory

    def on_validation_epoch_end(self):
        loss = torch.stack(self.validation_step_outputs).mean()
        self.log(f"validation_loss_epoch", loss, on_step=False, prog_bar=True, logger=True, sync_dist=True)
        self.validation_step_outputs.clear()  # free memory

    def configure_optimizers(self):
        optimizer = torch.optim.AdamW(
            # [
            #     # {"params": self.fwd_renderer.parameters()},
            #     # {"params": self.emb_function.parameters()}, 
            #     {"params": self.unet2d_model.parameters()},
            #     {"params": self.inv_renderer.parameters()},
            # ],
            # self.unet2d_model.parameters(),
            # self.inv_renderer.parameters(),
            self.parameters(),
            lr=self.lr,
            betas=(0.9, 0.999)
            # 
        )
        scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[100, 200], gamma=0.1)
        return [optimizer], [scheduler]
    

def main(hparams):
    # Seed the application
    torch.manual_seed(hparams.seed)
    
    # Create data module
    train_image3d_folders = [
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/NSCLC/processed/train/images"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-0"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-1"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-2"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-3"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-4"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MELA2022/raw/train/images"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MELA2022/raw/val/images"),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/Imagenglab/processed/train/images'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/AMOS2022/raw/train/images'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/AMOS2022/raw/val/images'),
    ]
    train_label3d_folders = []
    train_image2d_folders = [
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/JSRT/processed/images/'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/ChinaSet/processed/images/'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/Montgomery/processed/images/'),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/VinDr/v1/processed/train/images/"),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/VinDr/v1/processed/test/images/'),
    ]
    train_label2d_folders = []
    val_image3d_folders = [
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/NSCLC/processed/train/images"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-0"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-1"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-2"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-3"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MOSMED/processed/train/images/CT-4"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MELA2022/raw/train/images"),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/MELA2022/raw/val/images"),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/Imagenglab/processed/train/images'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/AMOS2022/raw/train/images'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/AMOS2022/raw/val/images'),
    ]
    val_image2d_folders = [
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/JSRT/processed/images/'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/ChinaSet/processed/images/'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/Montgomery/processed/images/'),
        # os.path.join(hparams.datadir, 'ChestXRLungSegmentation/VinDr/v1/processed/train/images/'),
        os.path.join(hparams.datadir, "ChestXRLungSegmentation/VinDr/v1/processed/test/images/"),
    ]
    test_image3d_folders = val_image3d_folders
    test_image2d_folders = val_image2d_folders

    datamodule = UnpairedDataModule(
        train_image3d_folders=[os.path.join(hparams.datadir, path) for path in train_image3d_folders],
        train_image2d_folders=[os.path.join(hparams.datadir, path) for path in train_image2d_folders],
        val_image3d_folders=[os.path.join(hparams.datadir, path) for path in val_image3d_folders],
        val_image2d_folders=[os.path.join(hparams.datadir, path) for path in val_image2d_folders],
        test_image3d_folders=[os.path.join(hparams.datadir, path) for path in test_image3d_folders],
        test_image2d_folders=[os.path.join(hparams.datadir, path) for path in test_image2d_folders],
        train_samples=hparams.train_samples,
        val_samples=hparams.val_samples,
        test_samples=hparams.test_samples,
        batch_size=hparams.batch_size,
        img_shape=hparams.img_shape,
        vol_shape=hparams.vol_shape,
    )
    datamodule.setup(seed=hparams.seed)

    # Callback
    checkpoint_callback = ModelCheckpoint(
        dirpath=f"{hparams.logsdir}_{hparams.phase}",
        monitor="validation_loss_epoch",
        auto_insert_metric_name=True,
        save_top_k=-1,
        save_last=True,
        every_n_epochs=10,
    )
    # Logger
    tensorboard_logger = TensorBoardLogger(save_dir=f"{hparams.logsdir}_{hparams.phase}", log_graph=True)

    # Init model with callbacks
    trainer = Trainer(
        accelerator=hparams.accelerator,
        devices=hparams.devices,
        max_epochs=hparams.epochs,
        logger=[tensorboard_logger],
        callbacks=[checkpoint_callback],
        accumulate_grad_batches=4,
        strategy="auto",
        precision=16 if hparams.amp else 32,
    )

    model = NVMLightningModule(hparams=hparams)
    # model = model.load_from_checkpoint(hparams.ckpt, strict=False) if hparams.ckpt is not None else model
    
    if hparams.test:
        trainer.test(
            model,
            dataloaders=datamodule.test_dataloader(),
            ckpt_path=hparams.ckpt
        )

    else:
        trainer.fit(
            model,
            # compiled_model,
            train_dataloaders=datamodule.train_dataloader(),
            val_dataloaders=datamodule.val_dataloader(),
            # datamodule=datamodule,
            ckpt_path=hparams.ckpt if hparams.ckpt is not None and hparams.strict else None,  # "some/path/to/my_checkpoint.ckpt"
        )


if __name__ == "__main__":
    parser = ArgumentParser()
    # Add all the arguments
    parser.add_argument("--conda_env", type=str, default="Unet")
    parser.add_argument("--notification_email", type=str, default="quantm88@gmail.com")
    parser.add_argument("--accelerator", default=None)
    parser.add_argument("--devices", default=None)
    # Model arguments
    parser.add_argument("--sh", type=int, default=0, help="degree of spherical harmonic (2, 3)")
    parser.add_argument("--pe", type=int, default=0, help="positional encoding (0 - 8)")
    parser.add_argument("--n_pts_per_ray", type=int, default=400, help="Sampling points per ray")
    parser.add_argument("--batch_size", type=int, default=1, help="size of the batches")
    parser.add_argument("--seed", type=int, default=42, help="seed")
    parser.add_argument("--img_shape", type=int, default=256, help="spatial size of the tensor")
    parser.add_argument("--vol_shape", type=int, default=256, help="spatial size of the tensor")
    parser.add_argument("--fov_depth", type=int, default=256, help="raymarch num of the tensor")
    parser.add_argument("--epochs", type=int, default=301, help="number of epochs")
    parser.add_argument("--train_samples", type=int, default=1000, help="training samples")
    parser.add_argument("--val_samples", type=int, default=400, help="validation samples")
    parser.add_argument("--test_samples", type=int, default=400, help="test samples")
    parser.add_argument("--timesteps", type=int, default=180, help="timesteps for diffusion")
    parser.add_argument("--amp", action="store_true", help="train with mixed precision or not")
    parser.add_argument("--test", action="store_true", help="test")
    parser.add_argument("--lpips", action="store_true", help="train with lpips xray ct random")
    parser.add_argument("--strict", action="store_true", help="checkpoint loading")
    parser.add_argument("--perceptual2d", action="store_true", help="perceptual 2d loss")
    parser.add_argument("--perceptual3d", action="store_true", help="perceptual 3d loss")
    parser.add_argument("--perceptual", action="store_true", help="perceptual 2d/fake 3d loss")
    parser.add_argument("--ssim", action="store_true", help="ssim")
    parser.add_argument("--resample", action="store_true", help="resample")
    parser.add_argument("--phase", type=str, default="direct", help="direct|cyclic|paired")
    parser.add_argument("--alpha", type=float, default=1.0, help="vol loss")
    parser.add_argument("--gamma", type=float, default=1.0, help="img loss")
    parser.add_argument("--delta", type=float, default=1.0, help="vgg loss")
    parser.add_argument("--theta", type=float, default=1.0, help="cam loss")
    parser.add_argument("--omega", type=float, default=1.0, help="cam cond")
    parser.add_argument("--lamda", type=float, default=1.0, help="cam roto")
    parser.add_argument("--tfunc", action="store_true", help="tfunc function")
    parser.add_argument("--lr", type=float, default=1e-3, help="adam: learning rate")
    parser.add_argument("--ckpt", type=str, default=None, help="path to checkpoint")
    parser.add_argument("--logsdir", type=str, default="logs", help="logging directory")
    parser.add_argument("--datadir", type=str, default="data", help="data directory")
    parser.add_argument("--strategy", type=str, default="auto", help="training strategy")
    parser.add_argument("--backbone", type=str, default="efficientnet-b7", help="Backbone for network")
    parser.add_argument("--prediction_type", type=str, default="sample", help="prediction_type for network")
    parser.add_argument("--weight_decay", type=float, default=1e-4, help="Weight decay")
    # Collect the hyper parameters
    hparams = parser.parse_args()
    main(hparams)